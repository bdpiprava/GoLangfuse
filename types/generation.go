package types

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

// GenerationEvent An event represents a discrete event in a trace.
// Usually, you want to add an event nested within a trace. Optionally you can nest it within another observation by
// providing a parent_observation_id. If no trace_id is provided, a new trace is created just for this event.
// Fields:
//   - ID the id of the generation can be set, defaults to random id.
//   - Name identifier of the generation. Useful for sorting/filtering in the UI.
//   - TraceID the trace ID associated with this generation. If not provided, a new trace is created.
//   - StartTime the time at which the generation started, defaults to the current time.
//   - CompletionStartTime 	The time at which the completion started. Used for latency analytics broken down into time until completion started and completion duration.
//   - EndTime the time at which the generation ended.
//   - Metadata additional metadata of the generation. Can be any JSON object. Metadata is merged when being updated via the API.
//   - Model the name of the model used for the generation.
//   - Input the prompt used for the generation. Can be any string or JSON object.
//   - Output the completion generated by the model. Can be any string or JSON object.
//   - Level the level of the generation. Used for sorting/filtering of traces with elevated error levels and for highlighting in the UI.
//   - StatusMessage the additional field for context of the event. E.g. the error message of an error event.
//   - ParentObservationID the ID of the parent observation, if applicable.
//   - Version the version of the generation type. Used to understand how changes to the span type affect metrics. Useful in debugging.
//   - ModelParameters the parameters of the model used for the generation, can be any key-value pairs.
//   - Usage the usage object. Refer [automatically infer](https://langfuse.com/docs/model-usage-and-cost) for more details.
//   - PromptVersion a prompt version
//   - PromptName a prompt name
type GenerationEvent struct {
	ID                  *uuid.UUID     `json:"id"`
	Name                string         `json:"name,omitempty"`
	TraceID             *uuid.UUID     `json:"traceId,omitempty"`
	StartTime           time.Time      `json:"startTime,omitempty"`
	CompletionStartTime time.Time      `json:"completionStartTime,omitempty"`
	EndTime             time.Time      `json:"endTime,omitempty"`
	Metadata            map[string]any `json:"metadata,omitempty"`
	Model               string         `json:"model,omitempty"`
	Input               any            `json:"input,omitempty"`
	Output              any            `json:"output,omitempty"`
	Level               Level          `json:"level,omitempty"`
	StatusMessage       string         `json:"statusMessage,omitempty"`
	ParentObservationID *uuid.UUID     `json:"parentObservationId,omitempty"`
	Version             string         `json:"version,omitempty"`
	ModelParameters     map[string]any `json:"modelParameters,omitempty"`
	Usage               Usage          `json:"usage,omitempty"`
	PromptVersion       int            `json:"promptVersion,omitempty"`
	PromptName          string         `json:"promptName,omitempty"`
}

// GetID return an event ID
func (t *GenerationEvent) GetID() *uuid.UUID {
	return t.ID
}

// SetID set event ID
func (t *GenerationEvent) SetID(id *uuid.UUID) {
	t.ID = id
}

// Error set Level to error and EndTime with status message
func (t *GenerationEvent) Error(statusMessage string, args ...any) *GenerationEvent {
	t.StatusMessage = fmt.Sprintf(statusMessage, args...)
	t.Level = Error
	return t.End()
}

// End set end time to now
func (t *GenerationEvent) End() *GenerationEvent {
	t.EndTime = time.Now().UTC()
	return t
}
